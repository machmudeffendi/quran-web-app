{"version":3,"sources":["serviceWorker.js","view/navbar/Navbar.js","view/home/listSurah/ListSurah.js","services/redux/config.js","services/redux/surah/action.js","services/redux/surah/actionTypes.js","view/home/Home.js","view/surah/listAyyah/ListAyyah.js","view/surah/Surah.js","view/nomatch/NoMatch.js","view/topButton/TopButton.js","view/footer/index.js","App.js","services/redux/apiMiddleware.js","services/redux/loggingMiddleware.js","services/redux/surah/surahReducer.js","services/redux/reducers.js","services/redux/configureStore.js","containers/Root.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","this","props","title","onClick","darkmode","className","to","React","Component","ListSurah","item","nama","arabic","dangerouslySetInnerHTML","__html","terjemah","id","HOST","getAllSurah","callback","type","payload","meta","url","Home","state","isLoading","handleUpdateSurah","setState","updateSurah","document","currentSurah","Fragment","role","undefined","map","index","key","defaultProps","connect","response","dataAllSurah","data","dispatch","ListAyyah","aya","text","Surah","noSurah","isLoadingTitle","isLoadingContent","redirect","redirectSurah","surahRedirect","bind","nosurah","params","updateAyyah","updateAllSurah","scrollTo","event","target","value","history","push","valueSurah","titleSurah","allSurah","onChange","hidden","withRouter","dataTitleSurah","dataValueSurah","getValueSurah","getTitleSurah","NoMatch","handleToTop","TopButton","Footer","href","App","darkMode","busrainCss","toggleDarkMode","join","path","exact","component","apiMiddleware","store","next","action","fetchOption","Object","assign","fetch","then","json","onSuccess","newAction","loggingMiddleware","console","log","initialState","reducer","dataSurah","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","Root","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.957fcf5c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Navbar extends React.Component{\r\n\r\n    render(){\r\n        const {title,onClick,darkmode} = this.props\r\n        return(\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-c-green\">\r\n                <div className=\"container\">\r\n                    <Link className=\"navbar-brand\" to=\"/#\" >{title}</Link>\r\n                    <div className=\"mr-auto\">\r\n                        <div className=\"navbar-nav\">\r\n                        <Link className=\"nav-item nav-link active\" to=\"/quran-web-app/\">Home <span className=\"sr-only\">(current)</span></Link>\r\n                        <Link className=\"nav-item nav-link\" to=\"/quran-web-app/surah\">Baca Surah</Link>\r\n                        <Link className=\"nav-item nav-link\" to=\"/quran-web-app/description\">Lihat Deskripsi</Link>\r\n                        </div>\r\n                    </div>\r\n                <button className=\"btn btn-dark btn-c-nav\" onClick={onClick}>{darkmode ? 'Light Mode' : 'Dark Mode'}</button>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ListSurah = ({item}) =>{\r\n    return(\r\n        <div className=\"col-sm-12 col-md-4 mt-3 mb-3\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{item.nama}</h5>\r\n                    <h6 className=\"card-subtitle mb-2 text-muted\">{item.arabic}</h6>\r\n                    <p className=\"card-text desc-h-scroll\"><span dangerouslySetInnerHTML={{__html: item.terjemah}} /></p>\r\n                    <Link to={'/quran-web-app/surah/' + item.id} className=\"card-link\">Baca</Link>\r\n                    <Link to={'/quran-web-app/surah/description/' + item.id} className=\"card-link\">Lihat Deskripsi</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        // <div className=\"items\" key={index}>\r\n        //     <div className=\"book\">\r\n        //         <Link to={'/surah/' + nomor} className=\"title-link\">{nama}</Link>\r\n        //         <p className=\"text-grey\">{asma}</p>\r\n        //         <span>{nomor}</span>\r\n        //     </div>\r\n        // </div>\r\n    )\r\n}\r\n\r\nexport default ListSurah;","export const HOST = \"http://quran-api-service.herokuapp.com/api/v1\";","import * as types from './actionTypes';\r\nimport { HOST } from '../config';\r\n\r\nexport const getAllSurah = (callback) => ({\r\n    type: types.GET_ALL_SURAH,\r\n    payload: [],\r\n    meta: {\r\n        type: 'api',\r\n        url: HOST + \"/surah\",\r\n        callback: callback\r\n    }\r\n})\r\n\r\nexport const getTitleSurah = (noSurah, callback) => ({\r\n    type: types.GET_TITLE_SURAH,\r\n    payload: [],\r\n    meta: {\r\n        type: 'api',\r\n        url: HOST + `/surah/${noSurah}`,\r\n        callback: callback\r\n    }\r\n})\r\n\r\nexport const getValueSurah = (noSurah, callback) => ({\r\n    type: types.GET_VALUE_SURAH,\r\n    payload: [],\r\n    meta: {\r\n        type: 'api',\r\n        url: HOST + `/quran-indopak/${noSurah}`,\r\n        callback: callback\r\n    }\r\n})","export const GET_ALL_SURAH = \"GET_ALL_SURAH\";\r\nexport const GET_TITLE_SURAH =\"GET_TITLE_SURAH\";\r\nexport const GET_VALUE_SURAH = \"GET_VALUE_SURAH\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport ListSurah from './listSurah/ListSurah';\r\nimport { getAllSurah } from '../../services/redux/surah/action';\r\n\r\nclass Home extends React.Component {\r\n\r\n    state = {\r\n        isLoading: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleUpdateSurah()\r\n\r\n        document.title = \"Home - Quran web\"\r\n    }\r\n\r\n    // componentWillUnmount(){\r\n    //     this.props.currentSurah = [];\r\n    // }\r\n\r\n    handleUpdateSurah = () => {\r\n        this.setState({isLoading: true})\r\n        this.props.updateSurah(() => {\r\n            this.setState({isLoading: false})\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const { currentSurah } = this.props;\r\n        const { isLoading } = this.state;\r\n        return(\r\n            <React.Fragment>\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-4\">Assalamuallaikum</h1>\r\n                    <p className=\"lead\">Selamat datang di Quran Web.</p>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"container mb-5 content\">\r\n                <div className=\"row\">\r\n                    <h2 className=\"text-center justify-content-center w-100\">{isLoading && <div className=\"spinner-border\" role=\"status\"><span className=\"sr-only\">Loading...</span></div>}</h2>\r\n                    {\r\n                    currentSurah.map === undefined \r\n                        ? <span className=\"alert alert-danger w-100\">Opps... Not found any data!</span> \r\n                        : currentSurah.map((item,index) => (<ListSurah key={index} item={item}/>))\r\n                    }\r\n                </div>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nHome.propTypes = {\r\n    currentSurah: PropTypes.array.isRequired\r\n};\r\n  \r\nHome.defaultProps = {\r\n    currentSurah: [\r\n        // {\r\n        //     asma: 'asma',\r\n        //     nama: 'Al-Fatihah',\r\n        //     arti: 'Pembukaan',\r\n        //     keterangan: 'Keterangan',\r\n        //     audio: 'audio',\r\n        //     nomor: 1\r\n        // },{\r\n        //     asma: 'asma',\r\n        //     nama: 'Al-Baqarah',\r\n        //     arti: 'Sapi Betina',\r\n        //     keterangan: 'Keterangan',\r\n        //     audio: 'audio',\r\n        //     nomor: 2\r\n        // },{\r\n        //     asma: 'asma',\r\n        //     nama: 'Ali\\'Imran',\r\n        //     arti: 'Keluarga Imran',\r\n        //     keterangan: 'Keterangan',\r\n        //     audio: 'audio',\r\n        //     nomor: 3\r\n        // },{\r\n        //     asma: 'asma',\r\n        //     nama: 'An-Nisa',\r\n        //     arti: 'Wanita',\r\n        //     keterangan: 'Keterangan',\r\n        //     audio: 'audio',\r\n        //     nomor: 4\r\n        // },\r\n    ]\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateSurah: (callback) => {\r\n        dispatch(getAllSurah(callback))\r\n    }\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentSurah: state.response.dataAllSurah.data\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);","import React from 'react';\r\n\r\nconst ListAyyah = ({item}) => {\r\n    return(\r\n        <div className=\"card mt-2 mb-2\">\r\n            <div className=\"card-body p-2\">\r\n                <span className=\"number-c-1\">{(item.aya <= 9) ? '0'+item.aya : item.aya }</span>\r\n                <div className=\"text-right\">\r\n                    <span className=\"arabic\">{item.text}</span>\r\n                </div>\r\n                <div className=\"text-left\">\r\n                    {/* <span className=\"arabic-tr\"><div dangerouslySetInnerHTML={{__html: arabTranslate}} /></span> */}\r\n                </div>\r\n                <div className=\"text-left\">\r\n                    {/* <span className=\"translate\">{indonesia}</span> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListAyyah;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link, withRouter  } from 'react-router-dom';\r\n\r\nimport ListAyyah from './listAyyah/ListAyyah';\r\nimport { getValueSurah, getTitleSurah, getAllSurah } from '../../services/redux/surah/action';\r\n\r\nclass Surah extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            noSurah: 0,\r\n            isLoadingTitle: false,\r\n            isLoadingContent: false,\r\n            redirect: false,\r\n            redirectSurah: 0,\r\n        }\r\n        this.surahRedirect = this.surahRedirect.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var nosurah = this.props.match.params.id;\r\n        this.setState({\r\n            noSurah: nosurah,\r\n            isLoadingTitle: true,\r\n            isLoadingContent: true\r\n        })\r\n        \r\n        this.props.updateAyyah(nosurah, () => {\r\n            this.setState({isLoadingContent: false})\r\n        })\r\n        this.props.updateSurah(nosurah, () => {\r\n            this.setState({isLoadingTitle: false})\r\n            // console.log(this.props.titleSurah);\r\n        });\r\n        this.props.updateAllSurah(() => {})\r\n        document.title = \"Surah \"+nosurah+\" - Quran web\"\r\n        window.scrollTo(0,0);\r\n    }\r\n\r\n    // componentWillUnmount(){\r\n    //     this.props.valueSurah = [];\r\n    //     this.props.titleSurah = {};\r\n    // }\r\n\r\n    surahRedirect(event){\r\n        // this.props.valueSurah = [];\r\n        var id = event.target.value;\r\n        this.setState({\r\n            noSurah: id,\r\n            redirect: true,\r\n            redirectSurah: id,\r\n            isLoadingContent: true,\r\n        });\r\n        this.props.updateAyyah(id, () => {\r\n            this.setState({isLoadingContent: false})\r\n        });\r\n        this.props.updateSurah(id, () => {\r\n            this.setState({isLoadingTitle: false})\r\n        });\r\n\r\n        document.title = \"Surah \"+id+\" - Quran web\"\r\n\r\n        this.props.history.push(\"/quran-web-app/surah/\"+id)\r\n    }\r\n\r\n    render(){\r\n        const { valueSurah, titleSurah, allSurah } = this.props;\r\n        const { isLoadingTitle, isLoadingContent } = this.state;\r\n\r\n        return(\r\n            <div className=\"container text-center mb-5 content\">\r\n\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-sm-2 text-left\">\r\n                        <Link to={'../'} className=\"link-back\"><button className=\"btn btn-c-green\">Kembali</button></Link>\r\n                    </div>\r\n                    <div className=\"col-sm-8\">\r\n                        <h2 className=\"title-surah\">{titleSurah.arabic} - {titleSurah.nama} - {titleSurah.terjemah}</h2>\r\n                        <h2>{isLoadingTitle  && <div className=\"spinner-border text-c-green\" role=\"status\"><span className=\"sr-only\">Loading...</span></div>}</h2>\r\n                    </div>\r\n                    <div className=\"col-sm-2 text-right\">\r\n                        <span className=\"right-choice-surah\">\r\n                            <select className=\"form-control\" onChange={this.surahRedirect}>\r\n                                <option hidden>Pilih Surah</option>\r\n                                {\r\n                                allSurah.map === undefined \r\n                                    ? '' \r\n                                    : allSurah.map((item, index) => (<option key={index} value={item.id}>{item.nama}</option>))\r\n                                }\r\n                            </select>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-sm-12 col-md-8\">\r\n                        \r\n                        <h2>{isLoadingContent  && <div className=\"spinner-border text-c-green\" role=\"status\"><span className=\"sr-only\">Loading...</span></div>}</h2>\r\n                        <div className=\"bx-items\">\r\n                            {\r\n                            valueSurah.map === undefined \r\n                                ? '' \r\n                                : valueSurah.map((item,index) => (<ListAyyah key={index} item={item}/>))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nSurah.propTypes = {\r\n    titleSurah: PropTypes.object.isRequired,\r\n    valueSurah: PropTypes.array.isRequired,\r\n    allSurah: PropTypes.array.isRequired,\r\n};\r\n  \r\nSurah.defaultProps = {\r\n    titleSurah: {},\r\n    valueSurah: [],\r\n    allSurah: []\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateAyyah: (noSurah,callback) => dispatch(getValueSurah(noSurah,callback)),\r\n    updateSurah: (noSurah,callback) => dispatch(getTitleSurah(noSurah,callback)),\r\n    updateAllSurah: (callback) => dispatch(getAllSurah(callback))\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        titleSurah: state.response.dataTitleSurah,\r\n        allSurah: state.response.dataAllSurah.data,\r\n        valueSurah: state.response.dataValueSurah.data,\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Surah));","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n \r\n\r\nconst NoMatch = () => {\r\n    return(\r\n        <div className=\"container text-center\">\r\n            <div className=\"mt-5\">\r\n                <h2 className=\"_404title\">Oops 404!</h2> \r\n                <span className=\"_404desc\">page not found..</span>\r\n                <Link to=\"/quran-web-app/\" className=\"_404link\">Back home</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoMatch;","import React from 'react';\r\n\r\nconst handleToTop = () =>{\r\n    window.scrollTo(0,0)\r\n}\r\n\r\nclass TopButton extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"goUp\" onClick={handleToTop}>^</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopButton;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <footer className=\"footer\">\r\n            <div className=\"text-center\">\r\n                <span className=\"text-muted\">Copyright &copy; 2019 <a href=\"http://github.com/machmudeffendi\" className=\"link-footer\">Machmudfends</a></span>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport Navbar from './view/navbar/Navbar';\r\nimport Home from './view/home/Home';\r\nimport Surah from './view/surah/Surah';\r\nimport NoMatch from './view/nomatch/NoMatch';\r\nimport TopButton from './view/topButton/TopButton';\r\nimport Footer from './view/footer';\r\n\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        darkMode: false,\r\n        busrainCss: ['busrain']\r\n    }\r\n    this.toggleDarkMode = this.toggleDarkMode.bind(this)\r\n  }\r\n\r\n  componentDidMount(){\r\n    // document.body.classList.add('d-flex');\r\n    // document.getElementsByTagName(\"HTML\").classList.add(\"h-100\");\r\n  }\r\n\r\n  toggleDarkMode(){\r\n      this.setState((state) => ({\r\n        darkMode: !state.darkMode,\r\n        busrainCss: ['busrain', !state.darkMode ? 'dark' : '']\r\n      }))\r\n  }\r\n\r\n  render(){\r\n    \r\n\r\n    return (\r\n      <div className={this.state.busrainCss.join(\" \")}>\r\n        <Router>\r\n          <Navbar title=\"Quran Web\" onClick={this.toggleDarkMode} darkmode={this.state.darkMode}/>\r\n          <Switch>\r\n            <Route path=\"/quran-web-app/\" exact component={Home}/>\r\n            <Route path=\"/quran-web-app/surah/:id\" exact component={Surah}/>\r\n            <Route component={NoMatch}/>\r\n          </Switch>\r\n          <TopButton/>\r\n        </Router>\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const apiMiddleware = store => next => action => {\r\n    if(!action.meta || action.meta.type !== 'api'){\r\n        return next(action);\r\n    }\r\n\r\n    const { url, callback } = action.meta;\r\n    const fetchOption = Object.assign({}, action.meta);\r\n\r\n    fetch(url, fetchOption)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            if(typeof action.meta.onSuccess === 'function'){\r\n                action.meta.onSuccess(json);\r\n            }\r\n            return json;\r\n        })\r\n        .then(json => {\r\n            let newAction = Object.assign({}, action, {\r\n                payload: json\r\n            });\r\n            delete newAction.meta;\r\n            store.dispatch(newAction);\r\n            if(!!callback){\r\n                callback();\r\n            }\r\n        })\r\n}\r\n\r\nexport default apiMiddleware;","const loggingMiddleware = (store) => (next) => (action) => {\r\n    console.log(`Redux Log: `, action);\r\n    next(action);\r\n}\r\n\r\nexport default loggingMiddleware;","import * as types from \"./actionTypes\";\r\n\r\nexport const initialState = {\r\n    dataAllSurah: {},\r\n    dataValueSurah: {},\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.GET_ALL_SURAH:\r\n            return {...state, dataAllSurah: action.payload}\r\n        case types.GET_TITLE_SURAH:\r\n            return {...state, dataTitleSurah: action.payload}\r\n        case types.GET_VALUE_SURAH:\r\n            return {...state, dataValueSurah: action.payload}\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport * as dataSurah from './surah/surahReducer';\r\n\r\nexport const initialState = {\r\n    response: dataSurah.initialState\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    response: dataSurah.reducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport apiMiddleware from './apiMiddleware';\r\nimport loggingMiddleware from './loggingMiddleware';\r\nimport { rootReducer, initialState } from './reducers';\r\n\r\nexport const configureStore = () => {\r\n    const store = createStore(\r\n        \r\n        rootReducer,\r\n        initialState,\r\n        applyMiddleware(\r\n            apiMiddleware,\r\n            loggingMiddleware\r\n        )\r\n    )\r\n\r\n    return store;\r\n}\r\n\r\nexport default configureStore;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport App from '../App';\r\nimport configureStore from '../services/redux/configureStore';\r\n\r\nconst Root = (props) => {\r\n    const store = configureStore();\r\n    return(\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './containers/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}