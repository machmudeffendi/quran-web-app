{"version":3,"sources":["serviceWorker.js","view/navbar/Navbar.js","services/redux/actionCreators.js","services/redux/types.js","view/home/listSurah/ListSurah.js","view/home/Home.js","view/surah/listAyyah/ListAyyah.js","view/surah/audioPlayer/AudioPlay.js","view/surah/Surah.js","view/nomatch/NoMatch.js","view/topButton/TopButton.js","App.js","services/redux/apiMiddleware.js","services/redux/loggingMiddleware.js","services/redux/currentSurah.js","services/redux/currentAyyah.js","services/redux/reducers.js","services/redux/configureStore.js","containers/Root.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","this","props","title","onClick","darkmode","className","React","Component","host","fetchNewSurah","callback","type","payload","meta","url","ListSurah","index","nomor","nama","asma","key","to","Home","state","isLoading","handleUpdateSurah","setState","updateSurah","currentSurah","Fragment","placeholder","map","item","connect","dispatch","ListAyyah","arab","arabTranslate","indonesia","dangerouslySetInnerHTML","__html","AudioPlay","play","togglePlay","bind","controls","src","Surah","noSurah","isLoadingTitle","isLoadingContent","redirect","redirectSurah","surahRedirect","nosurah","params","id","updateAyyah","scrollTo","currentAyyah","event","target","value","history","push","audio","onChange","hidden","ar","tr","withRouter","fetchNewAyyah","NoMatch","handleToTop","TopButton","App","darkMode","busrainCss","toggleDarkMode","join","path","exact","component","apiMiddleware","store","next","action","fetchOption","Object","assign","fetch","then","response","json","onSuccess","newAction","loggingMiddleware","console","log","initialState","reducer","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.079c65ea.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n\r\nclass Navbar extends React.Component{\r\n\r\n    render(){\r\n        const {title,onClick,darkmode} = this.props\r\n        return(\r\n            <nav className=\"nav-header shadow t-center\">\r\n                <span className=\"brand\">{title}</span>\r\n                <span className=\"right-navbar darkmode-btn\" onClick={onClick}>{darkmode ? 'Light Mode' : 'Dark Mode'}</span>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import * as types from './types';\r\n\r\nconst host = 'https://al-quran-8d642.firebaseio.com';\r\nconst listSurah = '/data.json?print=pretty';\r\n// const listAyyah = '/surat/1.json?print=pretty';\r\n\r\nexport const fetchNewSurah = (callback) => ({\r\n    type: types.FETCH_NEW_SURAH,\r\n    payload: [],\r\n    meta: {\r\n        type: 'api',\r\n        url: host + listSurah,\r\n        callback: callback,\r\n    }\r\n})\r\n\r\nexport const fetchNewAyyah = (noSurah = 1, callback) => ({\r\n    type: types.FETCH_NEW_AYYAH,\r\n    payload: [],\r\n    meta: {\r\n        type: 'api',\r\n        url: host + `/surat/${noSurah}.json?print=pretty`,\r\n        callback: callback\r\n    }\r\n})","export const FETCH_NEW_SURAH = 'FETCH_NEW_SURAH';\r\nexport const FETCH_NEW_AYYAH = 'FETCH_NEW_AYYAH';","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ListSurah = ({index, nomor, nama, asma}) =>{\r\n    return(\r\n        <div className=\"items\" key={index}>\r\n            <div className=\"book\">\r\n                <Link to={'/quran-web-app/surah/' + nomor} className=\"title-link\">{nama}</Link>\r\n                <p className=\"text-grey\">{asma}</p>\r\n                <span>{nomor}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListSurah;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchNewSurah } from '../../services/redux/actionCreators'\r\nimport ListSurah from './listSurah/ListSurah';\r\n\r\nclass Home extends React.Component {\r\n    static propTypes = {\r\n        currentSurah: PropTypes.object.isRequired\r\n    }\r\n\r\n    state = {\r\n        isLoading: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleUpdateSurah()\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.currentSurah.currentSurah = [];\r\n    }\r\n\r\n    handleUpdateSurah = () => {\r\n        this.setState({isLoading: true})\r\n        this.props.updateSurah(() => {\r\n            this.setState({isLoading: false})\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const { currentSurah } = this.props;\r\n        const { isLoading } = this.state;\r\n        return(\r\n            <React.Fragment>\r\n            <div className=\"search-body\">\r\n                <div className=\"search-box\">\r\n                <form>\r\n                    <input type=\"text\" className=\"bs-form-input\" placeholder=\"Search..\"/>\r\n                </form>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"content\">\r\n                <div className=\"box box-center\">\r\n                    <h2>{isLoading && 'Loading ..'}</h2>\r\n                    {currentSurah.currentSurah.map((item,index) => (\r\n                        <ListSurah key={index} item={index} nomor={item.nomor} nama={item.nama} asma={item.asma}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateSurah: (callback) => {\r\n        dispatch(fetchNewSurah(callback))\r\n    }\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentSurah: state.currentSurah\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);","import React from 'react';\r\n\r\nconst ListAyyah = ({nomor,arab,arabTranslate,indonesia}) => {\r\n    return(\r\n        <div className=\"item\">\r\n            <span className=\"nomor\">{(nomor <= 9) ? '0'+nomor : nomor }</span>\r\n            <span className=\"arabic\">{arab}</span>\r\n            <span className=\"arabic-tr\"><div dangerouslySetInnerHTML={{__html: arabTranslate}} /></span>\r\n            <span className=\"translate\">{indonesia}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListAyyah;","import React from 'react';\r\n\r\nclass AudioPlay extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            play: false\r\n        }\r\n        this.togglePlay = this.togglePlay.bind(this);\r\n    }\r\n\r\n    // audio = new Audio(this.props.url);\r\n\r\n    togglePlay(){\r\n        this.setState({play: !this.state.play,}, () => {\r\n            // this.state.play ? this.audio.play() : this.audio.pause()\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"bottom-player\">\r\n                {/* <button onClick={this.togglePlay}>{this.state.play ? 'Pause' : 'Play'}</button> */}\r\n                <audio controls>\r\n                    <source src={this.props.url} type=\"audio/mpeg\"/>\r\n                </audio>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AudioPlay;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchNewAyyah, fetchNewSurah } from '../../services/redux/actionCreators'\r\nimport ListAyyah from './listAyyah/ListAyyah';\r\nimport { Link, withRouter  } from 'react-router-dom';\r\nimport AudioPlay from './audioPlayer/AudioPlay';\r\n\r\nclass Surah extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            noSurah: 0,\r\n            isLoadingTitle: false,\r\n            isLoadingContent: false,\r\n            redirect: false,\r\n            redirectSurah: 0\r\n        }\r\n        this.surahRedirect = this.surahRedirect.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var nosurah = this.props.match.params.id;\r\n        this.setState({\r\n            noSurah: nosurah,\r\n            isLoadingTitle: true,\r\n            isLoadingContent: true\r\n        })\r\n        this.props.updateAyyah(nosurah, () => {\r\n            this.setState({isLoadingContent: false})\r\n        })\r\n        this.props.updateSurah(() => {\r\n            this.setState({isLoadingTitle: false})\r\n        })\r\n\r\n        window.scrollTo(0,0);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.currentAyyah.currentAyyah = [];\r\n        this.props.currentSurah.currentSurah = [];\r\n    }\r\n\r\n    surahRedirect(event){\r\n        this.props.currentAyyah.currentAyyah = [];\r\n        var id = event.target.value;\r\n        this.setState({\r\n            noSurah: id,\r\n            redirect: true,\r\n            redirectSurah: id,\r\n            isLoadingContent: true,\r\n        });\r\n        this.props.updateAyyah(id, () => {\r\n            this.setState({isLoadingContent: false})\r\n        });\r\n        this.props.history.push(\"/quran-web-app/surah/\"+id)\r\n    }\r\n\r\n    render(){\r\n        const { currentAyyah, currentSurah } = this.props;\r\n        const { isLoadingTitle, isLoadingContent, noSurah} = this.state;\r\n        return(\r\n            <div className=\"content\">\r\n                \r\n                <div className=\"audio-player\">\r\n                    {currentSurah.currentSurah.map((item, index) => (\r\n                        index === noSurah-1 && <AudioPlay key={index} url={item.audio}/>\r\n                    ))}\r\n                </div>\r\n                <span className=\"back\"><Link to={'../'} className=\"link-back\">Kembali</Link></span>\r\n                <span className=\"right-choice-surah\">\r\n                    <select className=\"\" onChange={this.surahRedirect}>\r\n                        <option hidden>Pilih Surah</option>\r\n                        {currentSurah.currentSurah.map((item, index) => (\r\n                            <option key={index} value={item.nomor}>{item.nama}</option>\r\n                        ))}\r\n                    </select>\r\n                </span>\r\n                <h2 className=\"title-surah\">{currentSurah.currentSurah.map((item, index) => (\r\n                    index === noSurah-1 ? item.asma+' - '+item.nama : ''\r\n                ))}</h2>\r\n                <h2>{isLoadingTitle  && 'Title Loading ..'}</h2>\r\n                <h2>{isLoadingContent  && 'Content Loading ..'}</h2>\r\n                <div className=\"bx-items\">\r\n                    {currentAyyah.currentAyyah.map((item,index) => (\r\n                        <ListAyyah key={index} nomor={item.nomor} arab={item.ar} arabTranslate={item.tr} indonesia={item.id}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateAyyah: (noSurah,callback) => dispatch(fetchNewAyyah(noSurah,callback)),\r\n    updateSurah: (callback) => dispatch(fetchNewSurah(callback))\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentAyyah: state.currentAyyah,\r\n        currentSurah: state.currentSurah\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Surah));","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n \r\nconst NoMatch = () => {\r\n    return(\r\n        <div className=\"_404\">\r\n            <h2>Oops 404!</h2> \r\n            <span className=\"_404desk\">Page not found :(</span>\r\n            <Link to=\"/quran-web-app/\" className=\"_404home\">Back home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoMatch;","import React from 'react';\r\n\r\nconst handleToTop = () =>{\r\n    window.scrollTo(0,0)\r\n}\r\n\r\nclass TopButton extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"goUp\" onClick={handleToTop}>^</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopButton;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Navbar from './view/navbar/Navbar';\nimport Home from './view/home/Home';\nimport Surah from './view/surah/Surah';\nimport NoMatch from './view/nomatch/NoMatch';\nimport TopButton from './view/topButton/TopButton';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n        darkMode: false,\n        busrainCss: ['busrain']\n    }\n\n    this.toggleDarkMode = this.toggleDarkMode.bind(this)\n  }\n\n  toggleDarkMode(){\n      this.setState((state) => ({\n        darkMode: !state.darkMode,\n        busrainCss: ['busrain', !state.darkMode ? 'dark' : '']\n      }))\n  }\n\n  render(){\n    return (\n      <div className={this.state.busrainCss.join(\" \")}>\n        <div className=\"basic-background\"></div>\n        \n        \n        {/* <Home/> */}\n        \n        {/* <Surah /> */}\n  \n        <Router>\n          <Navbar title=\"Quran\" onClick={this.toggleDarkMode} darkmode={this.state.darkMode}/>\n          <Switch>\n            <Route path=\"/quran-web-app/\" exact component={Home}/>\n            <Route path=\"/quran-web-app/surah/:id\" exact component={Surah}/>\n            <Route component={NoMatch}/>\n          </Switch>\n        </Router>\n  \n        <TopButton/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const apiMiddleware = store => next => action => {\r\n    if(!action.meta || action.meta.type !== 'api'){\r\n        return next(action);\r\n    }\r\n\r\n    const { url, callback } = action.meta;\r\n    const fetchOption = Object.assign({}, action.meta);\r\n\r\n    fetch(url, fetchOption)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            if(typeof action.meta.onSuccess === 'function'){\r\n                action.meta.onSuccess(json);\r\n            }\r\n            return json;\r\n        })\r\n        .then(json => {\r\n            let newAction = Object.assign({}, action, {\r\n                payload: json\r\n            });\r\n            delete newAction.meta;\r\n            store.dispatch(newAction);\r\n            if(!!callback){\r\n                callback();\r\n            }\r\n        })\r\n}\r\n\r\nexport default apiMiddleware;","const loggingMiddleware = (store) => (next) => (action) => {\r\n    console.log(`Redux Log: `, action);\r\n    next(action);\r\n}\r\n\r\nexport default loggingMiddleware;","import * as types from './types';\r\n\r\nexport const initialState = {\r\n    currentSurah: []\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.FETCH_NEW_SURAH:\r\n            return {...state, currentSurah: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as types from './types';\r\n\r\nexport const initialState = {\r\n    currentAyyah: []\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.FETCH_NEW_AYYAH:\r\n            return {...state, currentAyyah: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport * as currentSurah from './currentSurah';\r\nimport * as currentAyyah from './currentAyyah';\r\n\r\nexport const initialState = {\r\n    currentSurah: currentSurah.initialState,\r\n    currentAyyah: currentAyyah.initialState\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n    currentSurah: currentSurah.reducer,\r\n    currentAyyah: currentAyyah.reducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport apiMiddleware from './apiMiddleware';\r\nimport loggingMiddleware from './loggingMiddleware';\r\nimport { rootReducer, initialState } from './reducers';\r\n\r\nexport const configureStore = () => {\r\n    const store = createStore(\r\n        \r\n        rootReducer,\r\n        initialState,\r\n        applyMiddleware(\r\n            apiMiddleware,\r\n            loggingMiddleware\r\n        )\r\n    )\r\n\r\n    return store;\r\n}\r\n\r\nexport default configureStore;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport App from '../App';\r\nimport configureStore from '../services/redux/configureStore';\r\n\r\nconst Root = (props) => {\r\n    const store = configureStore();\r\n    return(\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './containers/Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}